{% set node = nodes[inventory_hostname] %}

{#
**************************************************
###         Interfaces configuration        ######
**************************************************
    #}
interfaces {
{% for intf,intf_attr in node.links.items()|sort %}
    {{ intf.split('.')[0] }} {
        description "{{intf_attr.remote}}"
{%      if intf_attr.vlan  is defined and intf_attr.vlan != 0 %}
        vlan-tagging;
        encapsulation flexible-ethernet-services;
        unit {{intf_attr.vlan}} {
            vlan-id {{intf_attr.vlan}};
            family inet {
                address {{intf_attr.ip}}/{{intf_attr.mask|default('24')}}
            }
{#          if intf_attr.mpls is defined #}
            family mpls;
{#          endif #}
        }
    }
{%      else %}
        unit 0 {
            family inet {
                address {{intf_attr.ip}}/{{intf_attr.mask|default('24')}}
            }
{#          if intf_attr.mpls is defined #}
            family mpls;
{#          endif #}
        }
    }
{%      endif %}   
{% endfor %}
    lo0 {
        unit 0 {
            family inet {
                address {{node.rid}}/32;
            }
        }
    }
}
{#
**************************************************
###         Global Variables                ######
**************************************************
    #}
routing-options {
    router-id {{ node.rid }};
    autonomous-system {{ common.bgp_asn }};
}
protocols {
{#
**************************************************
###         BGP  Variables                  ######
**************************************************
#}
{% if node.bgp is defined %}
    bgp {
{%      if node.bgp.internal is defined %}
        group Core {
            type internal;
            local-address {{ node.rid}};
{%          if node.bgp.internal.rr is defined and node.bgp.internal.rr == true %}
            cluster {{node.rid}};
{%          endif %}
{%          for af in node.bgp.internal.af %}
{%          if af == 'inet' %}
            family inet {               
                unicast;
            }
{%          endif %}
{%          if af == 'inet-vpn' %}
            family inet-vpn {
                unicast;
            }
{%          endif %}
{%          if af == 'evpn' %}
            family evpn {
                signaling;
            }
{%          endif %}
{%          endfor %}
{%          for peer in node.bgp.internal.peers %}
            neighbor {{ peer }};
{%          endfor %}
        }
{%      endif %}
    }
{% endif %}
{#
**************************************************
###         OSPF  Variables                  ######
**************************************************
#}
{% if node.ospf is defined %}
    ospf {
        area 0 {
{%          for intf, intf_attr in node.links.items()|sort %}
            interface {{ intf }} {
                interface-type p2p;
{%              if intf_attr.cost is defined %}
                metric {{intf_attr.cost }};
{%              endif %}
            }
{%          endfor %}
            interface lo0.0 {
                passive;
            }
        }
    }
{% endif %}
{#
**************************************************
###         LDP  Variables                  ######
**************************************************
#}
{% if node.ldp is not defined  %}
    ldp {
{%      for intf, intf_attr in node.links.items()|sort %}
        interface {{intf}} ;
{%      endfor %}
        interface lo0.0;
    }
{% endif %}
{#
**************************************************
###         RSVP  Variables                  ######
**************************************************
    #}
{% if node.rsvp is not defined %}
    rsvp {
{%      for intf, intf_attr in node.links.items()|sort %}
        interface {{intf}} ;
{%      endfor %}
    }
{% endif %}
{#
**************************************************
###         MPLS and LLDP  Variables        ######
**************************************************
    #}
{#% In this loop if LDP is enabled then MPLS will be enabled also on this interface %#}
    mpls {
{%      for intf, intf_attr in node.links.items()|sort %}
        interface {{intf}} ;
{%      endfor %}
    }
    lldp {
{%      for intf, intf_attr in node.links.items()|sort %}
        interface {{intf.split('.')[0]}} ;
{%      endfor %}
    }
}
