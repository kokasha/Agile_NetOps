---

## Validate network State
- name: Validate LLDP and Interfaces
  gather_facts: no
  connection: local
  hosts: all
  tags: [ validate ]
  tasks:
  - include_vars: "./NMP.yml"
  - name: GET BGP and Interfaces output
    napalm_get_facts:
      hostname: "{{ ansible_host }}"
      username: "{{ ansible_user }}"
      dev_os: "{{dev_os}}"
      optional_args:
        port: "{{ ansible_port }}"
      password: "{{ ansible_ssh_pass }}"
      filter: 
        - bgp_neighbors
        - interfaces_ip
        - interfaces
  - set_fact: node={{nodes[inventory_hostname]}}

      
  - name: Validate that all core interfaces are operational
    assert:
      that: napalm_interfaces[item.split('.')[0]].is_up == true
      msg:  |
        Interface {{item}} on {{inventory_hostname}} is not operational
    with_list: "{{node.links.keys()}}"
    ignore_errors: true

  - name: JunOS -- Validate all Interfaces are configured with correct IP and subnet mask
    assert:
      that: 
      - napalm_interfaces_ip[item].ipv4.keys()[0] == node.links[item].ip|ipaddr('address')
      - napalm_interfaces_ip[item].ipv4.values()[0]['prefix_length'] == 30
      msg:  |
        Interface {{item}} on {{inventory_hostname}} has incorrect IP address
    with_list: "{{node.links.keys()}}"
    when: "{{dev_os == 'junos'}}"
    ignore_errors: true

  - name: IOS and IOS-XR -- Validate all Interfaces are configured with correct IP and subnet mask
    assert:
      that: 
      - napalm_interfaces_ip[item.split('.')[0]].ipv4.keys()[0] == node.links[item].ip|ipaddr('address')
      - napalm_interfaces_ip[item.split('.')[0]].ipv4.values()[0]['prefix_length'] == 30
      msg:  |
        Interface {{item}} on {{inventory_hostname}} has incorrect IP address
    with_list: "{{node.links.keys()}}"
    when: "{{dev_os != 'junos'}}"

    ignore_errors: true

  - name: Validate all BGP Sessions are operational
    assert:
      that: 
      - napalm_bgp_neighbors.global.peers[item].is_up == true
      msg:  |
        BGP neighbor {{item}} on Router {{inventory_hostname}} is not operational
    with_list: "{{node.bgp.ibgp.peers}}"
    ignore_errors: true

- name: Validate Network Rechability
  gather_facts: no
  connection: local
  hosts: all
  tags: [ ping ]
  vars_files:
    - ./NMP.yml
  tasks:
  - name: Ping to remote destinations
    napalm_ping:
      hostname: "{{ ansible_host }}"
      username: "{{ ansible_user }}"
      dev_os: "{{dev_os}}"
      password: "{{ ansible_ssh_pass }}"
      optional_args:
        port: "{{ ansible_port }}"
      destination: "{{nodes[item].rid}}"
    with_list: "{{play_hosts}}"
    when: dev_os != 'iosxr'
    register: ping_result

  - debug: var=ping_result

  - name: Validate network reachability
    assert:
      that: item.results.success.packet_loss == 0
      msg: "{{item.item}} is not reachable to {{inventory_hostname}}"
    with_list: "{{hostvars[inventory_hostname].ping_result.results}}"
    when: dev_os != 'iosxr'
    ignore_errors: true

# 
  - name: ping on the IOS_XR
    iosxr_command:
      commands: ping {{nodes[item].rid}}
    with_list: "{{play_hosts}}" 
    when: dev_os == "iosxr"
    register: iosxr_ping
    ignore_errors: true

  - name: Validate IOS-XR network reachability
    assert:
      that:  "'!!!' in item.stdout[0] "
      msg: "{{item.item}} is not reachable to {{inventory_hostname}}"
    with_list: "{{hostvars[inventory_hostname].iosxr_ping.results}}"
    when: dev_os == 'iosxr'
    ignore_errors: true

#   #- debug: var=iosxr_ping
